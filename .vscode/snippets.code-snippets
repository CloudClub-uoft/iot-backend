{
	// Place your iot-device-backend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"GET request": {
		"prefix": "GET",
		"body": [
			"module.exports = (app) => {",
			"  app.get('/$1', (req, res) => {",
			"    const { $2 } = req.query;",
			"    $0",
			"    return res.status(200);",
			"  });",
			"};",
			""
		],
		"description": "GET request"
	},

	"POST request": {
		"prefix": "POST",
		"body": [
			"module.exports = (app) => {",
			"  app.post('/$1', (req, res) => {",
			"    const { $2 } = req.body;",
			"    $0",
			"    return res.status(200);",
			"  });",
			"};",
			""
		],
		"description": "POST request"
	},

	"Unit test": {
		"prefix": "mochatest",
		"body": [
			"const chai = require('chai');",
			"const chaiHttp = require('chai-http');",
			"",
			"const app = require('../app');",
			"",
			"const { expect } = chai;",
			"chai.use(chaiHttp);",
			"",
			"describe('$1', () => {",
			"  before(() => {",
			"    $2",
			"  });",
			"",
			"  it('it $3', (done) => {",
			"    $0",
			"    done();",
			"  });",
			"",
			"  after(() => {",
			"    $4",
			"  });",
			"});",
			""
		],
		"description": "Unit test"
	},
}